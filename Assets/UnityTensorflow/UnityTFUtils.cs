using Accord.Math;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.Serialization;
using TensorFlow;
using UnityEngine;

using static Current;

public static class UnityTFUtils
{
    // Mappings from Python calls to .NET
    static ObjectIDGenerator generator = new ObjectIDGenerator();

    public static long GetId(object x)
    {
        if (x == null)
            return 0;

        bool firstTime;
        return generator.GetId(x, out firstTime);
    }

    public static string ToString(object obj)
    {
        if (obj == null)
            return "null";

        if (obj is IEnumerable)
        {
            var l = new List<string>();
            foreach (object o in (IEnumerable)obj)
                l.Add(ToString(o));

            return "[" + string.Join(", ", l.ToArray()) + "]";
        }
        else if (obj is IDictionary)
        {
            var dict = obj as IDictionary;
            var l = new List<string>();
            foreach (object k in dict.Keys)
                l.Add($"{ToString(k)}: {ToString(dict[k])}");

            return "{" + string.Join(", ", l.ToArray()) + "}";
        }

        return obj.ToString();
    }



    /// <summary>
    ///   Input() is used to instantiate a Keras tensor.
    /// </summary>
    /// 
    /// <remarks>
    ///   A Keras tensor is a tensor object from the underlying backend (Theano or TensorFlow), which we 
    ///   augment with certain attributes that allow us to build a Keras model just by knowing the inputs
    ///   and outputs of the model.
    /// </remarks>
    /// 
    /// <param name="shape">A shape tuple (integer), including the batch size. For instance, 
    ///   <c>batch_shape= (10, 32)</c> indicates that the expected input will be batches of 10 32-dimensional
    ///   vectors. <c>batch_shape= (None, 32)</c> indicates batches of an arbitrary number of 32-dimensional 
    ///   vectors.</param>
    /// <param name="batch_shape">The batch shape.</param>
    /// <param name="name">An optional name string for the layer. Should be unique in a model (do not reuse
    ///   the same name twice). It will be autogenerated if it isn't provided.</param>
    /// <param name="dtype">The data type expected by the input, as a string
    ///   (`float32`, `float64`, `int32`...)</param>
    /// <param name="sparse">A boolean specifying whether the placeholder to be created is sparse.</param>
    /// <param name="tensor">Optional existing tensor to wrap into the `Input` layer.
    ///   If set, the layer will not create a placeholder tensor.</param>
    ///   
    public static List<UnityTFTensor> Input(int?[] shape = null, int?[] batch_shape = null, string name = null,
        DataType? dtype = null, bool sparse = false, UnityTFTensor tensor = null)
    {
        // https://github.com/fchollet/keras/blob/f65a56fb65062c8d14d215c9f4b1015b97cc5bf3/keras/engine/topology.py#L1416

        if (batch_shape == null && tensor == null && shape == null)
        {
            throw new ArgumentException("Please provide to Input either a 'shape' or a 'batch_shape' argument. Note that " +
                "'shape' does not include the batch dimension.");
        }

        if (shape != null && batch_shape == null)
            batch_shape = new int?[] { null }.Concatenate(shape);

        var input_layer = new InputLayer(batch_input_shape: batch_shape,
                                 name: name, dtype: dtype,
                                 sparse: sparse,
                                 input_tensor: tensor);

        // Return tensor including _keras_shape and _keras_history.
        // Note that in this case train_output and test_output are the same pointer.
        return input_layer.inbound_nodes[0].output_tensors;
    }


    //
    public static TFTensor TFTensorFromArray(Array array, TFShape shape, int start, int length)
    {
        
        if (array.GetType().GetElementType() == typeof(float))
        {
           return TFTensor.FromBuffer(shape, (float[])array, start, (int)length);
        }
        else if (array.GetType().GetElementType() == typeof(double))
        {
            return TFTensor.FromBuffer(shape, (double[])array, start, (int)length);
        }else if(array.GetType().GetElementType() == typeof(int))
        {
            return TFTensor.FromBuffer(shape, (int[])array, start, (int)length);
        }
        else
        {
            Debug.LogError("Data type of _constant input " + array.GetType().GetElementType() + " is not support with shape input");
            return null;
        }
    }

    public static TFTensor TFTensorFromT<T>(T value)
    {
        if (typeof(T) == typeof(float))
        {
           return new TFTensor((float)Convert.ChangeType(value, typeof(float)));
        }
        else if (typeof(T) == typeof(double))
        {
            return new TFTensor((double)Convert.ChangeType(value, typeof(double)));
        }
        else if (typeof(T) == typeof(int))
        {
            return new TFTensor((int)Convert.ChangeType(value, typeof(int)));
        }
        else
        {
            Debug.LogError("Does not Support Constant of type" + typeof(T).Name);
            return null;
        }
    }
}


public class ConvUtils
{
    /// <summary>
    ///   Transforms a single int or iterable of ints into an int tuple.
    /// </summary>
    /// <param name="value">The value to validate and convert. Could an int, or any iterable of ints.</param>
    /// <param name="n">The size of the tuple to be returned.</param>
    /// <param name="name">The name of the argument being validated, e.g. "strides" or "kernel_size".This is only used to format error messages.</param>
    /// <returns>System.Object.</returns>
    internal int[] NormalizeTuple(int value, int n, string name)
    {
        return Vector.Create<int>(size: n, value: value);
    }


    internal object NormalizeDataFormat(DataFormatType? value)
    {
        // https://github.com/fchollet/keras/blob/f65a56fb65062c8d14d215c9f4b1015b97cc5bf3/keras/utils/conv_utils.py#L46

        if (value == null)
            value = K.image_data_format();

        return value;
    }

    /// <summary>
    ///   Determines output length of a convolution given input length.
    /// </summary>
    /// 
    public static int? ConvOutputLength(int? input_length, int filter_size, PaddingType padding, int stride, int dilation = 1)
    {
        if (input_length == null)
            return null;
        int dilated_filter_size = filter_size + (filter_size - 1) * (dilation - 1);
        int output_length = 0;
        if (padding == PaddingType.Same)
            output_length = input_length.Value;
        else if (padding == PaddingType.Valid)
            output_length = input_length.Value - dilated_filter_size + 1;
        else if (padding == PaddingType.Causal)
            output_length = input_length.Value;
        else if (padding == PaddingType.Full)
            output_length = input_length.Value + dilated_filter_size - 1;
        else
            throw new Exception();
        return (output_length + stride - 1) / stride;
    }
}
